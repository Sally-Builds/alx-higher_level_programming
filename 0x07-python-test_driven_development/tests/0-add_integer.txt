Test Cases for add integer module
--------------------------------------------------------------
add_integer module takes two numbers and returns the sum

Test Cases
==========

>>> add_integer = __import__('0-add_integer').add_integer
>>> add_integer(10, 20)
30
>>> add_integer(2)
100
>>> add_integer()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: add_integer() missing 1 required positional argument: 'a'
>>> add_integer([])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 18, in add_integer
    raise TypeError("a must be an integer")
TypeError: a must be an integer
>>> add_integer("yes", 5)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 18, in add_integer
    raise TypeError("a must be an integer")
TypeError: a must be an integer
>>> add_integer(2.0)
100
>>> add_integer(10.9, 5.1)
15
>>> add_integer(8.0, 9)
17
>>> add_integer('x', 9.0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 18, in add_integer
    raise TypeError("a must be an integer")
TypeError: a must be an integer
>>> add_integer(-5, -9)
-14
>>> add_integer(float("inf"))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 21, in add_integer
    return (int(a) + int(b))
OverflowError: cannot convert float infinity to integer
>>> add_integer(0, float("inf"))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 21, in add_integer
    return (int(a) + int(b))
OverflowError: cannot convert float infinity to integer
>>> add_integer(float("-inf"), float("inf"))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 21, in add_integer
    return (int(a) + int(b))
OverflowError: cannot convert float infinity to integer
>>>  
